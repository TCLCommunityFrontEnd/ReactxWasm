[{"/local/sda/Webassembly/ReactxWasm/src/index.js":"1","/local/sda/Webassembly/ReactxWasm/src/reportWebVitals.js":"2","/local/sda/Webassembly/ReactxWasm/src/App.js":"3","/local/sda/Webassembly/ReactxWasm/src/workers/index.ts":"4","/local/sda/Webassembly/ReactxWasm/src/workers/fibonacci_worker.js":"5","/local/sda/Webassembly/ReactxWasm/src/pages/Fibonacci.tsx":"6","/local/sda/Webassembly/ReactxWasm/src/pages/Base64.tsx":"7","/local/sda/Webassembly/ReactxWasm/src/workers/base64_worker.js":"8"},{"size":500,"mtime":1655710264105,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1655710264105,"results":"11","hashOfConfig":"10"},{"size":2685,"mtime":1655779545051,"results":"12","hashOfConfig":"10"},{"size":147,"mtime":1655780723294,"results":"13","hashOfConfig":"10"},{"size":636,"mtime":1655710264105,"results":"14","hashOfConfig":"10"},{"size":2028,"mtime":1655783729386,"results":"15","hashOfConfig":"10"},{"size":3734,"mtime":1655799565434,"results":"16","hashOfConfig":"10"},{"size":2245,"mtime":1655795211670,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"16aolzy",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/local/sda/Webassembly/ReactxWasm/src/index.js",[],["40","41"],"/local/sda/Webassembly/ReactxWasm/src/reportWebVitals.js",[],"/local/sda/Webassembly/ReactxWasm/src/App.js",["42","43"],"import * as React from 'react';\nimport loader from \"@assemblyscript/loader\"; // or require\nimport Fibonacci from './pages/Fibonacci.tsx';\nimport Base64 from './pages/Base64.tsx';\nimport './App.css';\nimport {Tabs,Typography} from 'antd';\nconst {TabPane} = Tabs;\n\n//这个加在方法无法获取辅助函数\nfunction loadWebAssembly(filename, imports = {}) {\n  return fetch(filename)\n    .then(response => response.arrayBuffer())\n    .then(buffer => {\n      imports.env = imports.env || {}\n      Object.assign(imports.env, {\n        abort: (_msg, _file, line, column) => {\n          console.error(\"abort called at index.ts:\" + line + \":\" + column);\n        },\n        memoryBase: 0,\n        tableBase: 0,\n        __memory_base: 0,\n        __table_base: 0,\n        memory: new WebAssembly.Memory({ initial: 256, maximum: 256 }),\n        table: new WebAssembly.Table({ initial: 0, maximum: 0, element: 'anyfunc' })\n      })\n      return WebAssembly.instantiate(buffer, imports)\n    })\n    .then(result => {console.log(result);return result} )\n}\nfunction _loadWebAssembly(filename,imports = {}){\n  return loader.instantiate(fetch(filename),imports);\n}\n\nfunction App(){\n  // function calcByWASM(){\n  //   _loadWebAssembly('./wasm/module.optimized.wasm').then(instance => {\n  //     const { fib } = instance.exports ;\n  //     let result = [];\n  //     const beg = performance.now()\n  //     for (let i = 0; i <= 40; ++i) {\n  //       result[i] = fib(i)\n  //     }\n  //     const end = performance.now()\n  //     setWasmResult({beg,end,result});\n\n\n  //     const text = '年轻人不讲武德';\n  //     const {  __retain, __new, __release,__newString,__getString} = instance.exports\n  //     const { getBase64, Base64 } = instance.exports\n  //     const Base64Ptr = getBase64()\n  //     const base64 = Base64.wrap(Base64Ptr)\n  //     for(let i = 0;i<10000;i++) {\n  //       const textPtr = __retain(__newString(text))\n  //       const outputPtr = base64.encode(textPtr)\n  //       console.log(__getString(outputPtr))\n  //       __release(textPtr)\n  //       __release(outputPtr)\n  //     }\n  //     __release(Base64Ptr)\n  //   })\n  // }\n  function getWebassemblyInstance(){\n    return loader.instantiate(fetch('./wasm/module.optimized.wasm'),{});\n  }\n  return (\n    <div style={{padding:16}}>\n      <Typography.Title>WebAssembly示例</Typography.Title>\n      <Tabs defaultActiveKey=\"1\">\n        <TabPane tab=\"菲波那契数列\" key=\"1\">\n          <Fibonacci getInstance={getWebassemblyInstance}/>\n        </TabPane>\n        <TabPane tab=\"Base64转码\" key=\"2\">\n          <Base64 getInstance={getWebassemblyInstance}/>\n        </TabPane>\n      </Tabs>\n    </div>\n  )\n}\nexport default App;\n","/local/sda/Webassembly/ReactxWasm/src/workers/index.ts",[],["44","45"],"/local/sda/Webassembly/ReactxWasm/src/workers/fibonacci_worker.js",["46","47"],"const workercode = () => {\n    function fibonacci(n){\n        if(n==0)return 0\n        else if(n==1)return 1\n        else return fibonacci(n-1) + fibonacci(n-2)\n    }\n    let _result = [];\n    const _beg = performance.now();\n    for (let i = 0; i <= 40; ++i) {\n    _result[i] = fibonacci(i)\n    }\n    const _end = performance.now();\n    postMessage({\n        _beg,_end,_result\n    })\n}\n\n\nlet code = workercode.toString();\ncode = code.substring(code.indexOf(\"{\")+1, code.lastIndexOf(\"}\"));\n \nconst blob = new Blob([code], {type: \"application/javascript\"});\nconst worker_script = URL.createObjectURL(blob);\n \nexport default worker_script;","/local/sda/Webassembly/ReactxWasm/src/pages/Fibonacci.tsx",[],"/local/sda/Webassembly/ReactxWasm/src/pages/Base64.tsx",["48","49","50","51"],"import * as React from 'react';\nimport {base64_script} from '../workers/index';\nconst b64 = require('base64-wasm')\n\ninterface CompProps{\n    getInstance:()=>Promise<{}>\n}\n\nconst Base64  = (props:CompProps) => {\n    const {getInstance} = props;\n    const [originText,setOriginText] = React.useState();\n    const [jsResult,setJsResult] = React.useState({beg:'',end:'',result:''});\n    const [wasmResult,setWasmResult] = React.useState({beg:'',end:'',result:''});\n    React.useEffect(()=>{\n        if(originText!==undefined&&originText!==''){\n            calcByJSWorker(originText);\n            calcByWASM(originText);\n        }\n    },[originText]);\n    React.useEffect(()=>{\n        const inputFile = document.querySelector('#upload');\n        inputFile.addEventListener('input',function(e:any){\n            origin = e.target.files[0];\n            readFile(origin,'text').then((text)=>{\n                setOriginText(text);\n            })\n        });\n    },[])\n    function calcByWASM(text:string){\n        getInstance().then((instance:any)=>{\n            const {  __retain, __new, __release,__newString,__getString} = instance.exports\n            const { getBase64, Base64 } = instance.exports\n            const Base64Ptr = getBase64()\n            const base64 = Base64.wrap(Base64Ptr)\n            let result = '';\n            const textPtr = __retain(__newString(text))\n            const beg = performance.now()\n            const outputPtr = base64.encode(textPtr)\n            const end = performance.now();\n            result = __getString(outputPtr)\n            __release(textPtr)\n            __release(outputPtr)\n            __release(Base64Ptr)\n            setWasmResult({beg,end,result});\n        })\n        // b64.ready((err) => {\n        //     const message = Buffer.from(text)\n        //     const encoded = b64.encode(message)\n        //     const beg = performance.now()\n        //     const result = encoded.toString()\n        //     const end = performance.now();\n        //     setWasmResult({beg,end,result});\n        //   })\n    }\n    function calcByJSWorker(text:string){\n        let worker = new Worker(base64_script);\n        worker.postMessage(text);\n        worker.onmessage = function(e){\n          const {_beg,_end,_result} = e.data;\n          setJsResult({beg:_beg,end:_end,result:_result});\n        }\n    }\n    function readFile(file,type){\n        var reader = new FileReader();\n        return new Promise((resolve)=>{\n            switch(type){\n                case 'text':\n                    reader.readAsText(file);\n                    break;\n                case 'dataUrl':\n                    reader.readAsDataURL(file);\n                    break;\n                case 'arraybuffer':\n                    reader.readAsArrayBuffer(file);\n                    break;\n            }\n            reader.onload = function(e){\n                resolve(this.result);\n            }\n        })\n    }\n    return (\n        <>\n            <input type=\"file\" id=\"upload\"/>\n            <div >\n                <div className=\"Calc-fib-by-js\">\n                    <p>JS计算：<span>{jsResult.end-jsResult.beg}ms</span></p>\n                    <div className=\"ellipse\">{jsResult.result}</div>\n                </div>\n                <div className=\"Calc-fib-by-wasm\">\n                    <p>WASM计算：<span>{wasmResult.end-wasmResult.beg}ms</span></p>\n                    <div className=\"ellipse\">{wasmResult.result}</div>\n                    {/* {\n                    wasmResult.result.map((value, index)=>{\n                        return <div key={index}>fib({index}) = {value}</div>\n                    })\n                    } */}\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Base64;","/local/sda/Webassembly/ReactxWasm/src/workers/base64_worker.js",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":10,"column":10,"nodeType":"60","messageId":"61","endLine":10,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":30,"column":10,"nodeType":"60","messageId":"61","endLine":30,"endColumn":26},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"63","severity":1,"message":"64","line":3,"column":13,"nodeType":"65","messageId":"66","endLine":3,"endColumn":15},{"ruleId":"63","severity":1,"message":"64","line":4,"column":18,"nodeType":"65","messageId":"66","endLine":4,"endColumn":20},{"ruleId":"67","severity":1,"message":"68","line":3,"column":7,"nodeType":"60","messageId":"61","endLine":3,"endColumn":10},{"ruleId":"69","severity":1,"message":"70","line":19,"column":7,"nodeType":"71","endLine":19,"endColumn":19,"suggestions":"72"},{"ruleId":"54","severity":1,"message":"73","line":23,"column":13,"nodeType":"60","messageId":"74","endLine":23,"endColumn":19},{"ruleId":"67","severity":1,"message":"75","line":31,"column":32,"nodeType":"60","messageId":"61","endLine":31,"endColumn":37},{"ruleId":"54","replacedBy":"76"},{"ruleId":"56","replacedBy":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'loadWebAssembly' is defined but never used.","Identifier","unusedVar","'_loadWebAssembly' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'b64' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'calcByWASM'. Either include it or remove the dependency array.","ArrayExpression",["80"],"Read-only global 'origin' should not be modified.","nativeReassign","'__new' is assigned a value but never used.",["78"],["79"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},"Update the dependencies array to be: [calcByWASM, originText]",{"range":"83","text":"84"},[632,644],"[calcByWASM, originText]"]