[{"/local/front-end/testwasm/src/index.js":"1","/local/front-end/testwasm/src/App.js":"2","/local/front-end/testwasm/src/reportWebVitals.js":"3","/local/front-end/testwasm/src/workers/index.ts":"4","/local/front-end/testwasm/src/workers/fibonacci_worker.js":"5"},{"size":500,"mtime":1607410709627,"results":"6","hashOfConfig":"7"},{"size":3160,"mtime":1607427733799,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607410709627,"results":"9","hashOfConfig":"7"},{"size":80,"mtime":1607393550727,"results":"10","hashOfConfig":"7"},{"size":636,"mtime":1607393309359,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1mpd92e",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"/local/front-end/testwasm/src/index.js",[],["25","26"],"/local/front-end/testwasm/src/App.js",["27","28"],"/local/front-end/testwasm/src/reportWebVitals.js",[],"/local/front-end/testwasm/src/workers/index.ts",[],["29","30"],"/local/front-end/testwasm/src/workers/fibonacci_worker.js",["31","32"],"const workercode = () => {\n    function fibonacci(n){\n        if(n==0)return 0\n        else if(n==1)return 1\n        else return fibonacci(n-1) + fibonacci(n-2)\n    }\n    let _result = [];\n    const _beg = performance.now();\n    for (let i = 0; i <= 40; ++i) {\n    _result[i] = fibonacci(i)\n    }\n    const _end = performance.now();\n    postMessage({\n        _beg,_end,_result\n    })\n}\n\n\nlet code = workercode.toString();\ncode = code.substring(code.indexOf(\"{\")+1, code.lastIndexOf(\"}\"));\n \nconst blob = new Blob([code], {type: \"application/javascript\"});\nconst worker_script = URL.createObjectURL(blob);\n \nexport default worker_script;",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":8,"column":10,"nodeType":"39","messageId":"40","endLine":8,"endColumn":25},{"ruleId":"37","severity":1,"message":"41","line":57,"column":26,"nodeType":"39","messageId":"40","endLine":57,"endColumn":31},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"42","severity":1,"message":"43","line":3,"column":13,"nodeType":"44","messageId":"45","endLine":3,"endColumn":15},{"ruleId":"42","severity":1,"message":"43","line":4,"column":18,"nodeType":"44","messageId":"45","endLine":4,"endColumn":20},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'loadWebAssembly' is defined but never used.","Identifier","unusedVar","'__new' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]